float4x4 WorldViewProj : WorldViewProj ;
float4x4 World;

texture DiffuseMap;
texture NormalMap;
texture MRT0;
texture MRT1; 
texture MRT2;
texture MRT3;

sampler s0 : register(s0);
sampler s1 : register(s1);
sampler s2 : register(s2);
sampler s3 : register(s3);
sampler s4 : register(s4);
sampler s5 : register(s5);
sampler s6 : register(s6);
sampler3D s6_3d : register(s6);
samplerCUBE s7 : register(s7);

//**********************************************************
struct VS_INPUT1
{
    float4 Position  : POSITION; //in object space
    float2 TexCoord0 : TEXCOORD0;
    float2 TexCoord1 : TEXCOORD1;
};
//**********************************************************
struct VS_OUTPUT1 {
	float4 Position       : POSITION; //in projection space
	float2 TexCoord0      : TEXCOORD0;
    float2 TexCoord1	  : TEXCOORD1;   
};
//**********************************************************
VS_OUTPUT1 TerrainVS(VS_INPUT1 IN)
{
    VS_OUTPUT1 Out;

    Out.TexCoord0 = IN.TexCoord0.xy;
    Out.TexCoord1 = IN.TexCoord1.xy;

	float4	pos=IN.Position;
	pos=mul(pos, WorldViewProj);
	Out.Position =pos;
	return Out;
}

//**********************************************************
float4 Terrain1TexPS(VS_OUTPUT1 In):COLOR0
{
	float4 diffuseTex = tex2D( s0, In.TexCoord0);
//	float4 diffuseTex = tex2D( s5, In.TexCoord1);
	return diffuseTex;
}
//**********************************************************
float4 Terrain2TexPS(VS_OUTPUT1 In):COLOR0
{
	float4 diffuseTex0 = tex2D( s0, In.TexCoord0);
	float4 diffuseTex1 = tex2D( s1, In.TexCoord0);
	float4 alphaTex = tex2D( s5, In.TexCoord1);
//	return diffuseTex0*alphaTex.x+diffuseTex1*alphaTex.y;
	return lerp(diffuseTex0,diffuseTex1,alphaTex.rrrr);
}
//**********************************************************
float4 Terrain3TexPS(VS_OUTPUT1 In):COLOR0
{
	float4 diffuseTex0 = tex2D( s0, In.TexCoord0);
	float4 diffuseTex1 = tex2D( s1, In.TexCoord0);
	float4 diffuseTex2 = tex2D( s2, In.TexCoord0);
	float4 alphaTex = tex2D( s5, In.TexCoord1);
	return diffuseTex0*alphaTex.x+diffuseTex1*alphaTex.y+diffuseTex2*alphaTex.z;
}
//**********************************************************
float4 Terrain4TexPS(VS_OUTPUT1 In):COLOR0
{
	float4 diffuseTex0 = tex2D( s0, In.TexCoord0);
	float4 diffuseTex1 = tex2D( s1, In.TexCoord0);
	float4 diffuseTex2 = tex2D( s2, In.TexCoord0);
	float4 diffuseTex3 = tex2D( s3, In.TexCoord0);
	float4 alphaTex = tex2D( s5, In.TexCoord1);
	return diffuseTex0*alphaTex.x+diffuseTex1*alphaTex.y+diffuseTex2*alphaTex.z+diffuseTex3*alphaTex.w;
}
//**********************************************************
float4 Terrain5TexPS(VS_OUTPUT1 In):COLOR0
{
	float4 diffuseTex0 = tex2D( s0, In.TexCoord0);
	float4 diffuseTex1 = tex2D( s1, In.TexCoord0);
	float4 diffuseTex2 = tex2D( s2, In.TexCoord0);
	float4 diffuseTex3 = tex2D( s3, In.TexCoord0);
	float4 diffuseTex4 = tex2D( s4, In.TexCoord0);
	float4 alphaTex = tex2D( s5, In.TexCoord1);
	return diffuseTex0*alphaTex.x+diffuseTex1*alphaTex.y+diffuseTex2*alphaTex.z+diffuseTex3*alphaTex.w+diffuseTex4*(1-(alphaTex.x+alphaTex.y+alphaTex.z+alphaTex.w));
}


technique Terrain1Tex
{
	pass P0
	{
		VertexShader = compile vs_2_0 TerrainVS();
		PixelShader = compile ps_2_0 Terrain1TexPS();
	}
}

technique Terrain2Tex
{
	pass P0
	{
		VertexShader = compile vs_2_0 TerrainVS();
		PixelShader = compile ps_2_0 Terrain2TexPS();
	}
}
technique Terrain3Tex
{
	pass P0
	{
		VertexShader = compile vs_2_0 TerrainVS();
		PixelShader = compile ps_2_0 Terrain3TexPS();
	}
}
technique Terrain4Tex
{
	pass P0
	{
		VertexShader = compile vs_2_0 TerrainVS();
		PixelShader = compile ps_2_0 Terrain4TexPS();
	}
}
technique Terrain5Tex
{
	pass P0
	{
		VertexShader = compile vs_2_0 TerrainVS();
		PixelShader = compile ps_2_0 Terrain5TexPS();
	}
}
