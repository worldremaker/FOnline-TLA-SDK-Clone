#ifndef __UTILS_FOR_ARRAY__
#define __UTILS_FOR_ARRAY__
// Author: heX
// ver 2.0
// array utility functions

// функции перегружаються по мере необходимости поэтому многих типов тут может небыть.
// функции типа int, uint есть всегда.

// добавление элементов из массив (добавляет значение в конец массива)
#define AddToArray #(A,V) ArrayPushBack(A,V)
// #define AddToArray #(A,V) {A.resize(A.length()+1); A[A.length()-1]=V;}

// удаление по индексу
// RemoveFromArrayPtr - тоже но для массивов типа Critter@[]   (блин, тупежка...)
// #define RemoveFromArray #(A,I) ArrayErase(A,I); - неработает =(
#define RemoveFromArray #(A,I)    do{ uint __c__=A.length(); if (__c__!=0 && I<uint(__c__)) {for (uint __i__=uint(I); __i__<__c__-1; __i__++)  A[__i__] = A[__i__+1]; A.resize(__c__-1); }}while(false)
#define RemoveFromArrayPtr #(A,I) do{ uint __c__=A.length(); if (__c__!=0 && I<uint(__c__)) {for (uint __i__=uint(I); __i__<__c__-1; __i__++) @A[__i__] =@A[__i__+1]; A.resize(__c__-1); }}while(false)

// ищет значение в массиве ///////////////////////////

// int

int FindInArray(int[]& arr, int value)
{
    uint count=arr.length();
    for (uint i=0; i<count; i++)
    {
        if (arr[i]==value)
            return i;
    }
    return -1;
}

bool FindInArray(int[]& arr, int id, int& index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}

// uint

int FindInArray(uint[]& arr, uint value)
{
    uint count=arr.length();
    for (uint i=0; i<count; i++)
    {
        if (arr[i]==value)
            return i;
    }
    return -1;
}

bool FindInArray(uint[]& arr, uint id, int& index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}

// uint16

int FindInArray(uint16[]& arr, uint16 value)
{
    uint count=arr.length();
    for (uint i=0; i<count; i++)
    {
        if (arr[i]==value)
            return i;
    }
    return -1;
}

// uint8

int FindInArray(uint8[]& arr, uint8 value)
{
    uint count=arr.length();
    for (uint i=0; i<count; i++)
    {
        if (arr[i]==value)
            return i;
    }
    return -1;
}

bool FindInArray(uint8[]& arr, uint8 id, int& index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}

// присутствует ли это в массиве ///////////////////////////////

bool Present(int what, int[]& where)
{
    if (FindInArray(where, what)==-1)
        return false; else
        return true;
}

bool Present(uint what, uint[]& where)
{
    if (FindInArray(where, what)==-1)
        return false; else
        return true;
}

bool Present(uint16 what, uint16[]& where)
{
    if (FindInArray(where, what)==-1)
        return false; else
        return true;
}

void MergeArrays(uint16[]& arrayTo, uint16[]& arrayFrom)
{
	for(uint i = 0, l=arrayFrom.length();i<l;i++)
	{
		ArrayPushBack(arrayTo, arrayFrom[i]);
	}
}

void MergeArrays(int[]& arrayTo, int[]& arrayFrom)
{
	for(uint i = 0, l=arrayFrom.length();i<l;i++)
	{
		ArrayPushBack(arrayTo, arrayFrom[i]);
		ArrayPushBack(arrayTo, arrayFrom[i]);
	}
}
#endif // __UTILS_FOR_ARRAY__
