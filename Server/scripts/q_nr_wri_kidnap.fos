// Author: rifleman17
// Квест "Проблемы мистера Райта: Заложник."
#include "_macros.fos"
#define NEXT_KIDNAP_TIME         (60*60*24*30*Random(2,3))
#define KIDNAP_LOC_PROTO         (11111)
#define KINDAP_GLOBAL_X          (11111)
#define KINDAP_GLOBAL_Y          (11111)

#define GVAR_KIDNAP_ACCESS       (11111)
#define LLVAR_HOSTILE            (LLVAR_loc_defenders_hostile) // Признак: нпц враждебны
#define QUEST_VAR                (LVAR_q_nr_wri_kidnap) // Номер квестовой переменной
#define LVAR_LAST_NOTIFY         (LVAR_nr_wri_kidnap_notify_time) // Номер переменной, в которой сохраняется последнее время предупреждения игрока 
#define LLVAR_GUARD_DEAD         (LLVAR_nr_wri_guard_dead) // Признак: охранник Райта мертв

// Статусы квеста
#define Q_QUEST_TAKEN            (1) // Взят квест
#define Q_PAY_RAMIREZ            (2) // Игрок заплатил за освобождение Райта


#define ENT_DEADZONE_1           (100) // Начало мертвой зоны
#define ENT_DEADZONE_2           (112) // конец мертвой зоны

#define NPC_ROLE_MARODEUR        (1)   // Роль НПЦ - рядовой бандит
#define NPC_ROLE_GUARD           (2)   // Охранник пленного Райта


#define RADIUS_SEARCH_MARODEUR   (15) // Радиус в гексах, в котором нужно искать мародера, который начнет диалог с игроком


#define STR_MAP_IN_HOSTILE       (3350) // Вы на месте. Бандиты настороже и с оружием в руках. Мирным путем договориться не получится.
#define STR_MAP_IN_SNEAK_OK      (3351) // Вы на месте. Бандиты выглядят достаточно беспечно. Палатку с сыном Райта охраняет один часовой. Если убрать часового без лишнего шума, вы получите шанс решить все проблемы по-тихому.
#define STR_MAP_IN_LOWSNEAK      (3352) // Вы на месте. Бандиты выглядят достаточно беспечно. Главарь банды - в центре лагеря. Возможно, у вас получится заплатить выкуп и обойтись без кровопролития.
#define STR_MARODEUR_ATTACK      (1)    // Строка из диалога мародера, которую он произносит при атаке в специальных случаях.
#define STR_GUARD_SHOUT          (3353) // На помощь!@@Все сюда, Райт может сбежать!@@Подкрепление! Подкрепление!

#define DL #(s) (Log("kidnap: " + s))

import bool IsCritterInDeadZone(Critter & cr, Map & map, uint8 dir, uint8 hexFirst, uint8 hexEnd) from "entire";
import bool AddAttackPlane(Critter& npc, uint priority, Critter& target) from "npc_planes";
// ************************ Выдача квеста. *****************************************************************

uint KidnapLocationId = 0;

void _OliverInit(Critter& cr, bool firstTime)
{
	if(cr.Stat[ST_VAR0] == 0)
	{
		cr.StatBase[ST_VAR0] = CreateTimeEvent(__FullSecond + NEXT_KIDNAP_TIME, "e_Kidnap", true);
	}
	//cr.SetEvent(CRITTER_EVENT_FINISH, "_OliverFinish");
}

uint e_Kidnap(uint[]@ values)
{
	if(!KidnapLocationExist())
	{
		uint locId = CreateLocation(KIDNAP_LOC_PROTO, KINDAP_GLOBAL_X, KINDAP_GLOBAL_Y, null);
		if(locId > 0)
		{
			return 0;
		}
	}
	return NEXT_KIDNAP_TIME;
}

bool KidnapLocationExist()
{
	if(KidnapLocationId == 0)
		return false;
	Location@ loc = GetLocation(KidnapLocationId);
	return valid(loc);
}

bool d_QuestActive(Critter& player, Critter@ npc)
{
	return KidnapLocationExist();
}

bool d_NotQuestActive(Critter& player, Critter@ npc)
{
	return !KidnapLocationExist();
}

// ************************ Скрипт карты. ******************************************************************
void _MapInit(Map& map, bool firstTime)
{
	DL("Map init");
	map.SetEvent(MAP_EVENT_LOOP_0, "_MapLoop0");
	map.SetEvent(MAP_EVENT_IN_CRITTER, "_MapInCritter");
	map.SetEvent(MAP_EVENT_CRITTER_DEAD, "_MapCritterDead");
	
	map.SetEvent(MAP_EVENT_OUT_CRITTER, "_MapOutCritter");
	map.SetLoopTime(0, 6000);
}

void _MapInCritter(Map& map, Critter& cr)
{
	DL("Map in critter");
	Location@ loc = map.GetLocation();
	if(!valid(loc))
		return;
	GameVar@ status = GetLocalVar(LLVAR_HOSTILE, loc.Id);
	GameVar@ qVar = GetLocalVar(QUEST_VAR, cr.Id);
	if(valid(status) && valid(qVar) && qVar == Q_QUEST_TAKEN)
	{
		if(status == 1)
		{
			cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_MAP_IN_HOSTILE);
			return;
		}
		if(cr.Skill[SK_SNEAK] > 50)
			cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_MAP_IN_SNEAK_OK);		
		else
			cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_MAP_IN_LOWSNEAK);		
	}
}

void _MapOutCritter(Map& map, Critter& cr)
{
	Location@ loc = map.GetLocation();
	if(valid(loc))
		ResetHostileIfNoPlayers(loc);
}

void ResetHostileIfNoPlayers(Location& loc)
{
	GameVar@ status = GetLocalVar(LLVAR_HOSTILE, loc.Id);
	if(!valid(status) || status == 0)
		return;
	Critter@[] players;
	for(uint i = 0; i < loc.GetMapCount(); i++)
	{
		Map@ map = loc.GetMapByIndex(i);
		if(valid(map))
			map.GetCritters(0, FIND_LIFE_AND_KO|FIND_ONLY_PLAYERS, players);
	}
	if(players.length() == 0)
	{
		status = 0;
		// Если убит охранник, возрождаем его
		GameVar@ guardId = GetLocalVar(LLVAR_GUARD_DEAD, loc.Id);
		if(valid(guardId) && guardId > 0)
		{
			Critter@ cr = GetCritter(guardId.GetValue());
			if(valid(cr) && cr.IsNpc() && cr.IsDead())
			{
				guardId = 0;
				cr.ToLife();
			}
		}
	}
}
// ************************ На карте кто-то убит. **********************************************************
void _MapCritterDead(Map& map, Critter& cr, Critter@ killer)
{	
	Location@ loc = map.GetLocation();
	if(valid(loc))
		ResetHostileIfNoPlayers(loc);
}
// ************************ Атака рейдеров. ****************************************************************
// Признак: нпц на карте враждебны
bool IsHostile(Map& map)
{
	Location@ loc = map.GetLocation();
	if(valid(loc))
	{
		GameVar@ status = GetLocalVar(LLVAR_HOSTILE, loc.Id);
		return valid(status) && status == 1;
	}
	return false;
}

void SetHostile(Location@ loc, bool hostileOn)
{
	if(valid(loc))
	{
		GameVar@ status = GetLocalVar(LLVAR_HOSTILE, loc.Id);
		if(valid(status))
			status = hostileOn? 1 : 0;
	}
}

void AcceptAttack(Map& map)
{
DL("accept attack");
	if(!IsHostile(map))
		SetHostile(map.GetLocation(), true);
	uint marodeurs = map.GetNpcCount(NPC_ROLE_MARODEUR,FIND_LIFE|FIND_ONLY_NPC);
	Critter@ marodeur;
	Critter@[] players;
	Critter@ player;
	map.GetCritters(0, FIND_LIFE_AND_KO|FIND_ONLY_PLAYERS, players);
	for(uint i = 0; i < marodeurs; i++)
	{
		DL("marodeurs" + marodeurs);
		@marodeur = map.GetNpc(NPC_ROLE_MARODEUR, FIND_LIFE|FIND_ONLY_NPC, i);
		if(valid(marodeur))
		{
			for(uint j = 0, l = players.length(); j < l; j++)
			{
				@player = players[j];
				if(valid(player))
				{
					DL("target found");
					marodeur.AddEnemyInStack(player.Id);
					if(GetCrittersDistantion(marodeur, player) < 15)
					{
						AddAttackPlane(marodeur, 0, player);
					}			
				}
				
			}
		}
	}
}

void r_Attack(Critter& cr, Critter@ npc)
{
	AcceptAttack(cr.GetMap());
}

void dlg_Attack(Critter& cr, Critter@ npc, string@ lexems)
{
	AcceptAttack(cr.GetMap());
}

// ************************ Игрок в мертвой зоне. **********************************************************
// Мертвая зона. Если игрок в мертвой зоне, рейдеры будут обращаться к нему с вопросами "кто такой", с возможностью атаки
void _MapLoop0(Map& map)
{
	if(IsHostile(map))
		return;
	Critter@[] players;
	Critter@[] marodeurs;
	Critter@ player;
	Critter@ npc;
	if(map.GetCritters(0, FIND_LIFE|FIND_ONLY_PLAYERS, players) > 0)
	{
		for(uint i = 0, l = players.length(); i < l; i++)
		{
			@player = players[i];
			if(!valid(player))
				return;
			marodeurs.resize(0);
			if(map.GetCrittersHex(player.HexX, player.HexY, RADIUS_SEARCH_MARODEUR, FIND_LIFE|FIND_ONLY_NPC, marodeurs) > 0)
			{
				@npc = marodeurs[0];
				if(valid(npc) && npc.Stat[ST_NPC_ROLE] == NPC_ROLE_MARODEUR)
				{
					TryMarodeurDialog(player, npc, map);					
				}
			}
		}
	}
}

void TryMarodeurDialog(Critter& player, Critter& marodeur, Map& map)
{
	if(marodeur.GetTalkedPlayers(null) > 0)
		return; // НПЦ уже говорит с кем-то
	GameVar@ warned = GetLocalVar(LVAR_LAST_NOTIFY, player.Id);
	if(!valid(warned) || warned.GetValue() + __TimeMultiplier*20 > int(__FullSecond)) // запросы к игрокам не реже раз в 20 сек
		return;
	player.Wait(0);
	Critter@ cr;
	Critter@[] players;
	// проверка, что с игроком еще никто не разговаривает
	uint npcCount = map.GetNpcCount(NPC_ROLE_MARODEUR, FIND_LIFE|FIND_ONLY_NPC);
	if(npcCount > 0)
	{
		for(uint i = 0; i < npcCount; i++)
		{
			@cr  = map.GetNpc(NPC_ROLE_MARODEUR, FIND_LIFE|FIND_ONLY_NPC, i);
			if(valid(cr))
				cr.GetTalkedPlayers(players); // собираем всех говорящих игроков с нпц
		}	
	}
	for(uint i = 0, l = players.length(); i < l; i++)
	{
		@cr = players[i];
		if(valid(cr) && cr.Id == player.Id) // С этим игроком кто-то уже заговорил
			return;
	}
	// Все проверки пройдены, с игроком никто не говорит, время разрешения находиться на локации прошло. Запускаем еще один диалог
	warned = __FullSecond;
	RunDialog(player, marodeur, true);	
}

// ************************ Мародеры. **********************************************************************
void _HostileInit(Critter& cr, bool firstTime)
{
	cr.SetEvent(CRITTER_EVENT_ATTACK, "_HostileAttack");
}

bool _HostileAttack(Critter& cr, Critter& target)
{
	if(target.IsPlayer() && !target.IsDead() && !IsHostile(cr.GetMap()))
	{
		if(Random(1,2) == 1)
		{
			AcceptAttack(cr.GetMap());
			cr.SayMsg(SAY_SHOUT, TEXTMSG_TEXT, STR_GUARD_SHOUT);			
		}
			
	}
	return false;
}
// ************************ Охранник пленного Райта. *******************************************************
void _GuardInit(Critter& cr, bool firstTime)
{
	cr.SetEvent(CRITTER_EVENT_DEAD, "_GuardDead");
	cr.SetEvent(CRITTER_EVENT_ATTACKED, "_GuardAttacked");
	cr.SetEvent(CRITTER_EVENT_RESPAWN, "_GuardRespawn");
}

void _GuardDead(Critter& cr, Critter@ killer)
{
	Location@ loc = cr.GetMap().GetLocation();
	GameVar@ guardId = GetLocalVar(LLVAR_GUARD_DEAD, loc.Id);
	if(valid(guardId))
		guardId = cr.Id;
}

void _GuardRespawn(Critter& cr)
{
	Location@ loc = cr.GetMap().GetLocation();
	GameVar@ guardId = GetLocalVar(LLVAR_GUARD_DEAD, loc.Id);
	if(valid(guardId) && guardId == cr.Id)
		guardId = 0;
}

bool _GuardAttacked(Critter& cr, Critter& attacker)
{
	Item@ wpn = _CritGetItemHand(attacker);
	if(valid(wpn) && wpn.GetType() == ITEM_TYPE_WEAPON && wpn.Proto.Weapon_Skill_1!=SK_UNARMED && wpn.Proto.Weapon_Skill_1!=SK_MELEE_WEAPONS)
	{
		// Атака не холодным оружием, остальные должны прибежать
		if(!IsHostile(cr.GetMap()))
		{
			SetHostile(cr.GetMap().GetLocation(), true);
			cr.SayMsg(SAY_SHOUT, TEXTMSG_TEXT, STR_GUARD_SHOUT);
		}
	}
	return false;
}
