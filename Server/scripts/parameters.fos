// Author: cvet
#include "_macros.fos"

#ifdef __CLIENT
#define Critter CritterCl
#define Item ItemCl
#endif

#ifndef __CLIENT
import void PerkUp(Critter& cr, uint perk) from "perks";
import void PerkDown(Critter& cr, uint perk) from "perks";
#endif

int _StatGet(Critter& cr, uint stat)
{
	switch(stat)
	{
	case ST_STRENGTH: return GetStrength(cr);
	case ST_PERCEPTION: return GetPerception(cr);
	case ST_ENDURANCE: return GetEndurance(cr);
	case ST_CHARISMA: return GetCharisma(cr);
	case ST_INTELLECT: return GetIntellegence(cr);
	case ST_AGILITY: return GetAgility(cr);
	case ST_LUCK: return GetLuck(cr);
	case ST_MAX_LIFE: return GetMaxLife(cr);
	case ST_SEQUENCE: return GetSequence(cr);
	case ST_ACTION_POINTS: return GetMaxAp(cr);
	case ST_ARMOR_CLASS: return GetAc(cr);
	case ST_MELEE_DAMAGE: return GetMeleeDmg(cr);
	case ST_CARRY_WEIGHT: return GetMaxWeight(cr);
	case ST_HEALING_RATE: return GetHealingRate(cr);
	case ST_CRITICAL_CHANCE: return GetCriticalChance(cr);
	case ST_MAX_CRITICAL: return GetMaxCritical(cr);
	case ST_RADIATION_RESISTANCE: return GetRadiationResist(cr);
	case ST_POISON_RESISTANCE: return GetPoisonResist(cr);
	default: break;
	}

	if(stat>=ST_NORMAL_RESIST && stat<=ST_EXPLODE_RESIST) return GetDamageResistance(cr,stat-ST_NORMAL_RESIST+1);
	if(stat>=ST_NORMAL_ABSORB && stat<=ST_EXPLODE_ABSORB) return GetDamageThreshold(cr,stat-ST_NORMAL_ABSORB+1);
	return cr.StatBase[stat];
}

#ifndef __CLIENT
void _StatHpChanged(Critter& cr, uint, int oldValue)
{
	int curHp=cr.StatBase[ST_CURRENT_HP];
	if(curHp<=0 && cr.IsLife()) cr.StatBase[ST_CURRENT_HP]=1;
	if(curHp<__DeadHitPoints && not cr.IsDead()) cr.StatBase[ST_CURRENT_HP]=__DeadHitPoints+1;
	if(curHp>cr.Stat[ST_MAX_LIFE]) cr.StatBase[ST_CURRENT_HP]=cr.Stat[ST_MAX_LIFE];
}

void _StatExperienceChanged(Critter& cr, uint, int oldValue)
{
	int exp=cr.StatBase[ST_EXPERIENCE]-oldValue;
	if(exp>0)
	{
		uint level=cr.Stat[ST_LEVEL];
		if(level>=__LevelCap && not __LevelCapAddExperience) return;

		exp+=exp*(cr.Perk[PE_SWIFT_LEARNER]*5)/100; // SwiftLearner perk
		cr.StatBase[ST_EXPERIENCE]=oldValue+exp;

		if(level>=__LevelCap) return;

		int perkUp=(cr.Trait[TRAIT_SKILLED]!=0?4:3);
		while(true)
		{
			if(cr.StatBase[ST_EXPERIENCE]>=NextLevelNeedExp(cr))
			{
				level++;
				cr.StatBase[ST_LEVEL]++;

				cr.StatBase[ST_UNSPENT_SKILL_POINTS]+=5+cr.StatBase[ST_INTELLECT]*2; // Skill points
				if(cr.Trait[TRAIT_SKILLED]!=0) cr.StatBase[ST_UNSPENT_SKILL_POINTS]+=5; // Skilled trait
				//if(cr.Trait[TRAIT_GIFTED]!=0) cr.StatBase[ST_UNSPENT_SKILL_POINTS]-=5; // Gifted trait
				cr.StatBase[ST_UNSPENT_SKILL_POINTS]+=cr.Perk[PE_EDUCATED]*2; // Educated perk
				if(cr.StatBase[ST_UNSPENT_SKILL_POINTS]>99) cr.StatBase[ST_UNSPENT_SKILL_POINTS]=99; // Clamp skill points
				cr.StatBase[ST_MAX_LIFE]+=2+cr.StatBase[ST_ENDURANCE]/2+cr.Perk[PE_LIFEGIVER]*4; // Add max hp

				if((level%perkUp)==0)
				{
					cr.StatBase[ST_UNSPENT_PERKS]=1;
				}
			}
			else break;
		}
	}
}
#endif

int _SkillGet(Critter& cr, uint skill)
{
	int skillVal=cr.ParamBase[skill];
	return CLAMP(skillVal,-MAX_SKILL_VAL,MAX_SKILL_VAL);
}

int _TimeoutGet(Critter& cr, uint timeout)
{
	uint to=uint(cr.ParamBase[timeout]);
	if(__FullSecond>=to) return 0;
	return to-__FullSecond;
}

#ifndef __CLIENT
int _ReputationGet(Critter& cr, uint reputation)
{
	if(cr.ParamBase[reputation]==int(0x80000000)) cr.ParamBase[reputation]=0;
	return cr.ParamBase[reputation];
}

void _PerkChanged(Critter& cr, uint perk, int oldValue)
{
	int curValue=cr.Param[perk];
	if(curValue>oldValue) for(uint i=0,j=curValue-oldValue;i<j;i++) PerkUp(cr,perk);
	else if(curValue<oldValue)  for(uint i=0,j=oldValue-curValue;i<j;i++) PerkDown(cr,perk);
}

void _ModeHideChanged(Critter& cr, uint, int oldValue)
{
	cr.RefreshVisible();
}
#endif

/*#ifdef __CLIENT Good/Evil system, not used
#include "_colors.fos"

void _GoodEvilListChanged(CritterCl& chosen, uint index, int oldValue)
{
	if(chosen.IsChosen())
	{
		if(oldValue!=0)
		{
			int id=oldValue&0x7FFFFFFF;
			CritterCl@ cr=::GetCritter(id);
			if(valid(cr))
			{
				cr.NameColor=COLOR_CRITTER_NAME;
				cr.ContourColor=COLOR_CONTOUR_YELLOW;
			}
		}

		if(chosen.GoodEvilList[index]!=0)
		{
			int id=chosen.GoodEvilList[index];
			bool isEvil=FLAG(id,0x80000000);
			if(isEvil) id^=0x80000000;
			CritterCl@ cr=::GetCritter(id);
			if(valid(cr))
			{
				cr.NameColor=(isEvil?COLOR_RED:COLOR_GREEN);
				cr.ContourColor=(isEvil?COLOR_CONTOUR_RED:COLOR_CONTOUR_GREEN);
			}
		}
	}
}
#endif*/

int GetStrength(Critter& cr)
{
	int val=cr.StatBase[ST_STRENGTH]+cr.StatBase[ST_STRENGTH_EXT];
	if(cr.Perk[PE_ADRENALINE_RUSH]!=0 && cr.Timeout[TO_BATTLE]!=0
	&& cr.StatBase[ST_CURRENT_HP]<=(cr.StatBase[ST_MAX_LIFE]+cr.StatBase[ST_STRENGTH]+cr.StatBase[ST_ENDURANCE]*2)/2) val++;
	return CLAMP(val,1,10);
}

int GetPerception(Critter& cr)
{
	int val=(cr.Damage[DAMAGE_EYE]!=0?1:cr.StatBase[ST_PERCEPTION]+cr.StatBase[ST_PERCEPTION_EXT]);
	if(cr.Trait[TRAIT_NIGHT_PERSON]!=0) val+=GetNightPersonBonus();
	return CLAMP(val,1,10);
}

int GetEndurance(Critter& cr)
{
	int val=cr.StatBase[ST_ENDURANCE]+cr.StatBase[ST_ENDURANCE_EXT];
	return CLAMP(val,1,10);
}

int GetCharisma(Critter& cr)
{
	int val=cr.StatBase[ST_CHARISMA]+cr.StatBase[ST_CHARISMA_EXT];
	return CLAMP(val,1,10);
}

int GetIntellegence(Critter& cr)
{
	int val=cr.StatBase[ST_INTELLECT]+cr.StatBase[ST_INTELLECT_EXT];
	if(cr.Trait[TRAIT_NIGHT_PERSON]!=0) val+=GetNightPersonBonus();
	return CLAMP(val,1,10);
}

int GetAgility(Critter& cr)
{
	int val=cr.StatBase[ST_AGILITY]+cr.StatBase[ST_AGILITY_EXT];
	return CLAMP(val,1,10);
}

int GetLuck(Critter& cr)
{
	int val=cr.StatBase[ST_LUCK]+cr.StatBase[ST_LUCK_EXT];
	return CLAMP(val,1,10);
}

int GetMaxLife(Critter& cr)
{
	int val=cr.StatBase[ST_MAX_LIFE]+cr.StatBase[ST_MAX_LIFE_EXT]+cr.StatBase[ST_STRENGTH]+cr.StatBase[ST_ENDURANCE]*2;
	return CLAMP(val,1,9999);
}

int GetMaxAp(Critter& cr)
{
	int val=cr.StatBase[ST_ACTION_POINTS]+cr.StatBase[ST_ACTION_POINTS_EXT]+cr.Stat[ST_AGILITY]/2;
	return CLAMP(val,1,9999);
}

int GetAc(Critter& cr)
{
	int val=cr.StatBase[ST_ARMOR_CLASS]+cr.StatBase[ST_ARMOR_CLASS_EXT]+cr.Stat[ST_AGILITY]+cr.StatBase[ST_TURN_BASED_AC];
	Item@ armor=cr.GetItem(0,SLOT_ARMOR);
	if(valid(armor))
	{
		int wearProc=(armor.GetType()!=ITEM_ARMOR?0:100-GetWearProcent(armor));
		val+=armor.Proto.Armor_AC*wearProc/100;
	}
	return CLAMP(val,0,90);
}

int GetMaxMoveAp(Critter& cr)
{
	int val=cr.StatBase[ST_MAX_MOVE_AP];
	return CLAMP(val,0,9999);
}

int GetMoveAp(Critter& cr)
{
	int val=cr.StatBase[ST_MOVE_AP];
	return CLAMP(val,0,9999);
}

int GetKarma(Critter& cr)
{
	int val=cr.StatBase[ST_KARMA];
	if(cr.Perk[PE_KARMA_BEACON]!=0) val*=2;
	return val;
}

int GetMeleeDmg(Critter& cr)
{
	int strength=cr.Param[ST_STRENGTH];
	int val=cr.StatBase[ST_MELEE_DAMAGE]+cr.StatBase[ST_MELEE_DAMAGE_EXT]+(strength>6?strength-5:1);
	return CLAMP(val,1,9999);
}

int GetMaxWeight(Critter& cr)
{
	int val=MAX(cr.StatBase[ST_CARRY_WEIGHT]+cr.StatBase[ST_CARRY_WEIGHT_EXT],0);
	val+=LBS_TO_GRAMM(25+cr.Stat[ST_STRENGTH]*(25-cr.Trait[TRAIT_SMALL_FRAME]*10));
	return val;
}

int GetSequence(Critter& cr)
{
	int val=cr.StatBase[ST_SEQUENCE]+cr.StatBase[ST_SEQUENCE_EXT]+cr.Stat[ST_PERCEPTION]*2;
	return CLAMP(val,0,9999);
}

int GetHealingRate(Critter& cr)
{
	int endurance=cr.Stat[ST_ENDURANCE]/3;
	if(endurance<1) endurance=1;
	int val=cr.StatBase[ST_HEALING_RATE]+cr.StatBase[ST_HEALING_RATE_EXT]+endurance;
	return CLAMP(val,-9999,9999);
}

int GetCriticalChance(Critter& cr)
{
	int val=cr.StatBase[ST_CRITICAL_CHANCE]+cr.StatBase[ST_CRITICAL_CHANCE_EXT]+cr.Stat[ST_LUCK];
	return CLAMP(val,0,100);
}

int GetMaxCritical(Critter& cr)
{
	int val=cr.StatBase[ST_MAX_CRITICAL]+cr.StatBase[ST_MAX_CRITICAL_EXT];
	return CLAMP(val,-100,100);
}

int GetDamageResistance(Critter& cr, int dmgType) // Export
{
	Item@ armor=cr.GetItem(0,SLOT_ARMOR);
	if(valid(armor) && armor.GetType()!=ITEM_ARMOR) @armor=null;
	int wearProc=(not valid(armor)?0:100-GetWearProcent(armor));

	int val=0;
	switch(dmgType)
	{
	case DAMAGE_UNCALLED: break;
	case DAMAGE_NORMAL:   val=cr.StatBase[ST_NORMAL_RESIST] +cr.StatBase[ST_NORMAL_RESIST_EXT] +(valid(armor)?armor.Proto.Armor_DRNormal*wearProc/100:0); break;
	case DAMAGE_LASER:    val=cr.StatBase[ST_LASER_RESIST]  +cr.StatBase[ST_LASER_RESIST_EXT]  +(valid(armor)?armor.Proto.Armor_DRLaser*wearProc/100:0); break;
	case DAMAGE_FIRE:     val=cr.StatBase[ST_FIRE_RESIST]   +cr.StatBase[ST_FIRE_RESIST_EXT]   +(valid(armor)?armor.Proto.Armor_DRFire*wearProc/100:0); break;
	case DAMAGE_PLASMA:   val=cr.StatBase[ST_PLASMA_RESIST] +cr.StatBase[ST_PLASMA_RESIST_EXT] +(valid(armor)?armor.Proto.Armor_DRPlasma*wearProc/100:0); break;
	case DAMAGE_ELECTR:   val=cr.StatBase[ST_ELECTRO_RESIST]+cr.StatBase[ST_ELECTRO_RESIST_EXT]+(valid(armor)?armor.Proto.Armor_DRElectro*wearProc/100:0); break;
	case DAMAGE_EMP:      val=cr.StatBase[ST_EMP_RESIST]    +cr.StatBase[ST_EMP_RESIST_EXT]    +(valid(armor)?armor.Proto.Armor_DREmp:0); break;
	case DAMAGE_EXPLODE:  val=cr.StatBase[ST_EXPLODE_RESIST]+cr.StatBase[ST_EXPLODE_RESIST_EXT]+(valid(armor)?armor.Proto.Armor_DRExplode*wearProc/100:0); break;
	default: break;
	}

	if(dmgType==DAMAGE_EMP) return CLAMP(val,0,999);
	return CLAMP(val,0,90);
}

int GetDamageThreshold(Critter& cr, int dmgType) // Export
{
	Item@ armor=cr.GetItem(0,SLOT_ARMOR);
	if(valid(armor) && armor.GetType()!=ITEM_ARMOR) @armor=null;
	int wearProc=(not valid(armor)?0:100-GetWearProcent(armor));

	int val=0;
	switch(dmgType)
	{
	case DAMAGE_UNCALLED: break;
	case DAMAGE_NORMAL:   val=cr.StatBase[ST_NORMAL_ABSORB] +cr.StatBase[ST_NORMAL_ABSORB_EXT] +(valid(armor)?armor.Proto.Armor_DTNormal*wearProc/100:0); break;
	case DAMAGE_LASER:    val=cr.StatBase[ST_LASER_ABSORB]  +cr.StatBase[ST_LASER_ABSORB_EXT]  +(valid(armor)?armor.Proto.Armor_DTLaser*wearProc/100:0); break;
	case DAMAGE_FIRE:     val=cr.StatBase[ST_FIRE_ABSORB]   +cr.StatBase[ST_FIRE_ABSORB_EXT]   +(valid(armor)?armor.Proto.Armor_DTFire*wearProc/100:0); break;
	case DAMAGE_PLASMA:   val=cr.StatBase[ST_PLASMA_ABSORB] +cr.StatBase[ST_PLASMA_ABSORB_EXT] +(valid(armor)?armor.Proto.Armor_DTPlasma*wearProc/100:0); break;
	case DAMAGE_ELECTR:   val=cr.StatBase[ST_ELECTRO_ABSORB]+cr.StatBase[ST_ELECTRO_ABSORB_EXT]+(valid(armor)?armor.Proto.Armor_DTElectro*wearProc/100:0); break;
	case DAMAGE_EMP:      val=cr.StatBase[ST_EMP_ABSORB]    +cr.StatBase[ST_EMP_ABSORB_EXT]    +(valid(armor)?armor.Proto.Armor_DTEmp:0); break;
	case DAMAGE_EXPLODE:  val=cr.StatBase[ST_EXPLODE_ABSORB]+cr.StatBase[ST_EXPLODE_ABSORB_EXT]+(valid(armor)?armor.Proto.Armor_DTExplode*wearProc/100:0); break;
	default: break;
	}

	return CLAMP(val,0,999);
}

int GetRadiationResist(Critter& cr)
{
	int val=cr.StatBase[ST_RADIATION_RESISTANCE]+cr.StatBase[ST_RADIATION_RESISTANCE_EXT]+cr.Stat[ST_ENDURANCE]*2;
	return CLAMP(val,0,95);
}

int GetPoisonResist(Critter& cr)
{
	int val=cr.StatBase[ST_POISON_RESISTANCE]+cr.StatBase[ST_POISON_RESISTANCE_EXT]+cr.Stat[ST_ENDURANCE]*5;
	return CLAMP(val,0,95);
}

int GetNightPersonBonus()
{
	if(__Hour<6 || __Hour>18) return 1;
	if(__Hour==6 && __Minute==0) return 1;
	if(__Hour==18 && __Minute>0) return 1;
	return -1;
}

int GetWearProcent(Item& item)
{
	if(not item.IsWeared()) return 0;
	if(FLAG(item.BrokenFlags,BI_BROKEN)) return 100;
	int value=item.BrokenWear*100/WEAR_MAX;
	return CLAMP(value,0,100);
}

int NextLevelNeedExp(Critter& cr) // Export
{
	int level=cr.Stat[ST_LEVEL];
	return NUMERICAL_NUMBER(level)*1000;
}


// Parameters generation
// For server and client
// Both generation need be equal
// Input for player: 7 special, 3 tag skills, 2 traits, age, gender
// Imput for npc: data from prototype
#ifndef __CLIENT
#define _param_ cr.ParamBase
void CritterGenerate(Critter& cr) // Export to main@critter_init
#endif
#ifdef __CLIENT
#define _param_ data
void CritterGenerate(int[]& data) // Export to client_main@player_data_generate
#endif
{
	if(_param_[ST_LEVEL]<=0) _param_[ST_LEVEL]=1;

	if(_param_[TRAIT_SMALL_FRAME]!=0) _param_[ST_AGILITY]+=1;
	if(_param_[TRAIT_BRUISER]!=0) _param_[ST_STRENGTH]+=2;
	if(_param_[TRAIT_GOOD_NATURED]!=0)
	{
		_param_[SK_FIRST_AID]+=15;
		_param_[SK_DOCTOR]+=15;
		_param_[SK_SPEECH]+=15;
		_param_[SK_BARTER]+=15;
		_param_[SK_SMALL_GUNS]-=10;
		_param_[SK_BIG_GUNS]-=10;
		_param_[SK_ENERGY_WEAPONS]-=10;
		_param_[SK_UNARMED]-=10;
		_param_[SK_MELEE_WEAPONS]-=10;
		_param_[SK_THROWING]-=10;
	}
	//if(_param_[TRAIT_GIFTED]!=0)
	//{
	//	for(uint i=ST_STRENGTH;i<=ST_LUCK;i++) _param_[i]++;
	//	for(uint i=SKILL_BEGIN;i<=SKILL_END;i++) _param_[i]-=10;
	//}

	_param_[SK_SMALL_GUNS]+=5+4*_param_[ST_AGILITY];
	_param_[SK_BIG_GUNS]+=0+2*_param_[ST_AGILITY];
	_param_[SK_ENERGY_WEAPONS]+=0+2*_param_[ST_AGILITY];
	_param_[SK_UNARMED]+=30+2*(_param_[ST_AGILITY]+_param_[ST_STRENGTH]);
	_param_[SK_MELEE_WEAPONS]+=20+2*(_param_[ST_AGILITY]+_param_[ST_STRENGTH]);
	_param_[SK_THROWING]+=0+4*_param_[ST_AGILITY];
	_param_[SK_FIRST_AID]+=0+2*(_param_[ST_PERCEPTION]+_param_[ST_INTELLECT]);
	_param_[SK_DOCTOR]+=5+_param_[ST_PERCEPTION]+_param_[ST_INTELLECT];
	_param_[SK_SNEAK]+=5+3*_param_[ST_AGILITY];
	_param_[SK_LOCKPICK]+=10+_param_[ST_PERCEPTION]+_param_[ST_AGILITY];
	_param_[SK_STEAL]+=0+3*_param_[ST_AGILITY];
	_param_[SK_TRAPS]+=10+_param_[ST_PERCEPTION]+_param_[ST_AGILITY];
	_param_[SK_SCIENCE]+=0+4*_param_[ST_INTELLECT];
	_param_[SK_REPAIR]+=0+3*_param_[ST_INTELLECT];
	_param_[SK_SPEECH]+=0+5*_param_[ST_CHARISMA];
	_param_[SK_BARTER]+=0+4*_param_[ST_CHARISMA];
	_param_[SK_GAMBLING]+=0+5*_param_[ST_LUCK];
	_param_[SK_OUTDOORSMAN]+=0+2*(_param_[ST_ENDURANCE]+_param_[ST_INTELLECT]);

	if(_param_[TAG_SKILL1]!=0) _param_[_param_[TAG_SKILL1]]+=20;
	if(_param_[TAG_SKILL2]!=0) _param_[_param_[TAG_SKILL2]]+=20;
	if(_param_[TAG_SKILL3]!=0) _param_[_param_[TAG_SKILL3]]+=20;

	if(_param_[TRAIT_FAST_METABOLISM]!=0)
	{
		_param_[ST_RADIATION_RESISTANCE]-=_param_[ST_ENDURANCE]*2;
		_param_[ST_POISON_RESISTANCE]-=_param_[ST_ENDURANCE]*5;
		_param_[ST_HEALING_RATE]+=2;
	}
	if(_param_[TRAIT_BRUISER]!=0) _param_[ST_ACTION_POINTS]-=2;
	if(_param_[TRAIT_KAMIKAZE]!=0)
	{
		_param_[ST_ARMOR_CLASS]-=_param_[ST_AGILITY];
		_param_[ST_SEQUENCE]+=5;
	}
	if(_param_[TRAIT_HEAVY_HANDED]!=0) _param_[ST_MELEE_DAMAGE]+=4;
	if(_param_[TRAIT_FINESSE]!=0) _param_[ST_CRITICAL_CHANCE]+=10;
	if(_param_[TRAIT_HEAVY_HANDED]!=0) _param_[ST_MAX_CRITICAL]-=30;

#ifdef __CLIENT
	// Runtime calculations, only for client registration
	_param_[ST_ARMOR_CLASS]+=_param_[ST_AGILITY];
	_param_[ST_MAX_LIFE]+=_param_[ST_STRENGTH]+_param_[ST_ENDURANCE]*2;
	_param_[ST_ACTION_POINTS]+=_param_[ST_AGILITY]/2;
	_param_[ST_CARRY_WEIGHT]+=LBS_TO_GRAMM(25+_param_[ST_STRENGTH]*(25-_param_[TRAIT_SMALL_FRAME]*10));
	_param_[ST_MELEE_DAMAGE]+=(_param_[ST_STRENGTH]>6?_param_[ST_STRENGTH]-5:1);
	_param_[ST_POISON_RESISTANCE]+=_param_[ST_ENDURANCE]*5;
	_param_[ST_RADIATION_RESISTANCE]+=_param_[ST_ENDURANCE]*2;
	_param_[ST_SEQUENCE]+=_param_[ST_PERCEPTION]*2;
	_param_[ST_HEALING_RATE]+=_param_[ST_ENDURANCE];
	_param_[ST_CRITICAL_CHANCE]+=_param_[ST_LUCK];
#endif

	_param_[ST_MAX_LIFE]+=15;
	_param_[ST_ACTION_POINTS]+=5;
	_param_[ST_CURRENT_HP]=_param_[ST_MAX_LIFE];
	_param_[ST_CURRENT_AP]=_param_[ST_ACTION_POINTS]*100;
}

#ifdef __CLIENT
#include "_msgstr.fos"
// Check valid of input data
bool CritterGenerateCheck(int[]& data) // Export to client_main@player_data_check
{
	// Check special
	int special=0;
	for(uint i=ST_STRENGTH;i<=ST_LUCK;i++)
	{
		if(data[i]<1 || data[i]>10)
		{
			Message(GetMsgStr(TEXTMSG_GAME,STR_NET_WRONG_SPECIAL));
			return false;
		}
		special+=data[i];
	}
	if(special!=40)
	{
		Message(GetMsgStr(TEXTMSG_GAME,STR_NET_WRONG_SPECIAL));
		return false;
	}
	// Check choosed tag skills
	if((data[TAG_SKILL1]<int(SKILL_BEGIN) || data[TAG_SKILL1]>int(SKILL_END))
	|| (data[TAG_SKILL2]<int(SKILL_BEGIN) || data[TAG_SKILL2]>int(SKILL_END))
	|| (data[TAG_SKILL3]<int(SKILL_BEGIN) || data[TAG_SKILL3]>int(SKILL_END)))
	{
		Message(GetMsgStr(TEXTMSG_GAME,STR_NET_WRONG_TAGSKILL));
		return false;
	}
	return true;
}
#endif

#ifndef __CLIENT
void NpcProcessLevel(Critter& npc) // Export
{
	for(int i=0,j=npc.Stat[ST_LEVEL];i<j;i++)
	{
		// Todo: ...
		// npc.StatBase[ST_MAX_LIFE]+=10;
	}
}
#endif











